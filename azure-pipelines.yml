# This .yml file is a series of integration steps to integrate various Veracode tools within the Azure DevOps pipeline

trigger:
- manual

pool:
  vmImage: ubuntu-latest

# Schedule build. Time is in UTC. Format is mm HH DD MM DW
schedules:
- cron: '00 16 * * *' # 16:00 UTC = 12:00pm ET
  displayName: Daily build
  branches:
    include:
    - master

steps:

# This step allows me to pull my API Credentials from my Azure Key Vault.
- task: AzureKeyVault@2
  enabled: false
  inputs:
    azureSubscription: 'Veracode-Key-Vault-verademo'
    KeyVaultName: 'veracode-keyvault'
    SecretsFilter: '*'
    RunAsPreJob: true

# This step MANUALLY builds my Java application using Maven.
# NOT NEEDED if using Veracode CLI to auto-package
- task: Maven@3
  enabled: false
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'package'

# This step takes my packaged application from the previous step and places it in a target folder
# NOT NEEDED if using Veracode CLI to auto-package
- task: CopyFiles@2
  enabled: false
  displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: '**/?(*.ear|*.war|*.jar)'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

# This step uses the Veracode CLI to auto-package my application
- task: Bash@3
  displayName: Auto-Package
  enabled: true
  inputs:
    targetType: "inline"
    script: |
      curl -fsS https://tools.veracode.com/veracode-cli/install | sh
      ./veracode package -s '$(Build.SourcesDirectory)' -o '$(build.artifactstagingdirectory)' -a true

# This step will run a local static scan (pipeline scan) using the Veracode CLI
# Add || false to the end of the static scan command to fail the build based on findings
- task: Bash@3
  displayName: CLI SAST and DAST Scans
  enabled: true
  inputs:
    targetType: "inline"
    script: |
      export VERACODE_API_KEY_ID=$(VERACODE_API_ID)
      export VERACODE_API_KEY_SECRET=$(VERACODE_API_KEY)
      ./veracode static scan '$(build.artifactstagingdirectory)'/verademo.war || true
      ./veracode dynamic scan --webhook '$(WEBHOOK)'

# This stepp will run a local static scan (pipeline scan) using the Veracode ADO Pipeline Scan Extension. 
# This is NOT an official Veracode extension, but was created by someone within Veracode.
- task: VeracodePipelineScan@0
  displayName: Pipeline Scan
  enabled: false
  inputs:
    VeracodeAPIID: '$(VERACODE_API_ID)'
    VeracodeAPIsecret: '$(VERACODE_API_KEY)'
    fileToScan: '$(Build.ArtifactStagingDirectory)/verademo.war'

# This step will run a Veracode static scan and upload the results to the Veracode platform using the Veracode upload & scan task.
- task: Veracode@3
  displayName: Upload and Scan
  enabled: true
  inputs:
    ConnectionDetailsSelection: 'Service Connection'
    AnalysisService: 'verademo'
    veracodeAppProfile: 'Verademo-Java'
    version: 'Verademo-$(build.buildNumber)'
    filepath: '$(build.artifactstagingdirectory)'
    createSandBox: false # Set true to create sandbox, or false if sandbox is already created
    # sandboxName: 'Azure DevOps'
    importResults: true # Set true if you want the SAST scan results in the console output
    maximumWaitTime: '360'

# This step will import my flaws that violate policy as ADO work items
- task: Veracode Flaw Importer@3
  displayName: Veracode Flaw Importer
  enabled: false
  inputs:
    ConnectionDetailsSelection: 'Service Connection'
    AnalysisService: 'verademo'
    failBuildIfFlawImporterFails: true
    veracodeAppProfile: 'Verademo-Java'
    sandboxName: 'Azure DevOps'
    scanType: 'Static, SCA'
    importType: 'All Unmitigated Flaws Violating Policy'
    workItemType: 'Issue'
    area: '$(system.teamProject)'
    overwriteAreaPathInWorkItemsOnImport: true
    iterationPath: '$(system.teamProject)'
    overwriteIterationPath: true
    addCustomTag: 'external'
    flawImportLimit: '1000'

# This step will run an SCA Agent-Based Scan for 3rd party library vulnerabilities. 
- task: CmdLine@2
  displayName: SCA Agent-Based Scan
  enabled: false
  inputs:
    script: |
      export SCM_URI='https://Verademo-ADO'
      export SRCCLR_API_TOKEN=$(SRCCLR_API_TOKEN)
      export scaDownloadUrl=https://download.srcclr.com/ci.sh
      export SCM_REF_TYPE=branch
      # make sure the branch name is set appropriately for the below scm_ref 
      export SCM_REF=master
      export SCM_REV=1.0
      curl -sSL $scaDownloadUrl | env bash -s scan --scm-uri $SCM_URI --scm-rev $SCM_REV --scm-ref $SCM_REF --scm-ref-type $SCM_REF_TYPE --update-advisor


##### FOLLOWING TASKS ARE OPTIONAL/EXTRA #####
# This step will CREATE a Veracode application profile and add it to a business unit and team, and run a static scan
- task: Veracode@3
  displayName: Create Profile & Upload and Scan
  enabled: false
  inputs:
    ConnectionDetailsSelection: 'Service Connection'
    AnalysisService: 'verademo'
    veracodeAppProfile: '$(Build.Repository.Name)'
    version: '$(build.buildNumber)'
    filepath: '$(build.artifactstagingdirectory)'
    optargs: '-businessunit DevBusinessUnit -teams Test 1'
    createProfile: true
    maximumWaitTime: '360'

# This step will run a policy scan using our Java API Wrapper in case the ADO Veracode upload & scan extension doesn't work
- task: Bash@3
  displayName: Policy Scan via API Wrapper Bash Script
  enabled: false
  inputs:
    targetType: "inline"
    script: |
      curl -sSO https://repo1.maven.org/maven2/com/veracode/vosp/api/wrappers/vosp-api-wrappers-java/23.8.12.0/vosp-api-wrappers-java-23.8.12.0-dist.zip
      unzip -o vosp-api-wrappers-java-23.8.12.0-dist.zip
      java -jar VeracodeJavaAPI.jar -vid $(VERACODE_API_ID) -vkey $(VERACODE_API_KEY) -action uploadandscan -appname 'Verademo-Java' -createprofile false -filepath '$(build.artifactstagingdirectory)' -version 'Verademo-Policy-$(build.buildNumber)' -scanpollinginterval 120 -publishedscansonly true

# This step will run a local pipeline scan using our pipleine-scan.jar in case the ADO Veracode pipeline scan extension doesn't work
# NOT NEEDED if using Veracode CLI to run the pipeline scan
- task: Bash@3
  displayName: Veracode Pipeline Scan via Bash Script
  enabled: false
  inputs:
    targetType: "inline"
    script: |
      curl -sSO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
      unzip -o pipeline-scan-LATEST.zip
      java -jar pipeline-scan.jar -vid $(VERACODE_API_ID) -vkey $(VERACODE_API_KEY) -f '$(build.artifactstagingdirectory)/verademo.war' -r $(System.DefaultWorkingDirectory)/results.json || true
    # VERACODE_API_ID and VERACODE_API_KEY environment variables must reference your API credentials.
    # "|| true" specifies to continue build if Pipeline Scan discovers flaws.
    # To fail the build for new flaws not listed in a baseline file, add an existing baseline file with "-bf <baseline filename>" and remove "|| true".
# - publish: $(System.DefaultWorkingDirectory)/results.json # Save the scan results as a file named results.json.
#  artifact: VeracodeBaseline

# This will kick off a DAST Essentials Scan
- task: Bash@3
  displayName: DAST Essentials
  enabled: false
  inputs:
    targetType: "inline"
    script: |
      bash start_veracode.sh $VERACODE_WEBHOOK $VERACODE_API_ID $VERACODE_API_KEY
       env:
       VERACODE_WEBHOOK: $(veracodeWebhook)

