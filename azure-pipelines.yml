# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:
- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'package'

- task: CopyFiles@2
  displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: '**/?(*.ear|*.war|*.jar)'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: Veracode@3
  displayName: Upload and Scan
  enabled: true
  inputs:
    ConnectionDetailsSelection: 'Service Connection'
    AnalysisService: 'verademo'
    veracodeAppProfile: 'Verademo'
    version: 'Verademo-$(build.buildNumber)'
    filepath: '$(build.artifactstagingdirectory)'
    createSandBox: false # Set true to create sandbox, or false if sandbox is already created
    sandboxName: 'Azure DevOps'
    # importResults: true # Set true if you want the SAST scan results in the console output
    maximumWaitTime: '360'

- task: Veracode Flaw Importer@3
  displayName: Veracode Flaw Importer
  enabled: true
  inputs:
    ConnectionDetailsSelection: 'Service Connection'
    AnalysisService: 'verademo'
    failBuildIfFlawImporterFails: true
    veracodeAppProfile: 'Verademo-Java'
    sandboxName: 'Azure DevOps'
    scanType: 'Static, SCA'
    importType: 'All Unmitigated Flaws Violating Policy'
    workItemType: 'Issue'
    area: '$(system.teamProject)'
    overwriteAreaPathInWorkItemsOnImport: true
    iterationPath: '$(system.teamProject)'
    flawImportLimit: '1000'

- task: CmdLine@2
  displayName: SCA Agent-Based Scan
  enabled: true
  inputs:
    script: |
      export SCM_URI='https://Verademo-ADO'
      export SRCCLR_API_TOKEN=$(SRCCLR_API_TOKEN)
      export scaDownloadUrl=https://download.srcclr.com/ci.sh
      export SCM_REF_TYPE=branch
      # make sure the branch name is set appropriately for the below scm_ref 
      export SCM_REF=main
      export SCM_REV=1.0
      curl -sSL $scaDownloadUrl | env DEBUG=1 bash -s scan --scm-uri $SCM_URI --scm-rev $SCM_REV --scm-ref $SCM_REF --scm-ref-type $SCM_REF_TYPE

- task: Bash@3
  displayName: Veracode Pipeline Scan
  enabled: true
  inputs:
    targetType: "inline"
    script: |
      curl -sSO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
      unzip -o pipeline-scan-LATEST.zip
      java -jar pipeline-scan.jar -vid $(VERACODE_API_ID) -vkey $(VERACODE_API_KEY) -f $(build.artifactstagingdirectory)/verademo.war -r $(System.DefaultWorkingDirectory)/results.json || true
    # VERACODE_API_ID and VERACODE_API_KEY environment variables must reference your API credentials.
    # "|| true" specifies to continue build if Pipeline Scan discovers flaws.
    # To fail the build for new flaws not listed in a baseline file, add an existing baseline file with "-bf <baseline filename>" and remove "|| true".
# - publish: $(System.DefaultWorkingDirectory)/results.json # Save the scan results as a file named results.json.
#  artifact: VeracodeBaseline